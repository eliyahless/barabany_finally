"use server"

import { z } from "zod"
import { sendTelegramNotification } from "@/lib/telegram"
import { appendToGoogleSheet } from "@/lib/google-sheets"
import { createHmac } from "crypto"

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
const FormSchema = z.object({
  name: z.string().min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"),
  phone: z.string().regex(/^\+7\d{10}$/, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
  honeypot: z.string().max(0, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ—Ç").optional(),
  formId: z.string().optional(),
  timestamp: z.number().optional(),
  token: z.string().optional(),
})

// –¢–∏–ø –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
type FormResult = {
  success: boolean
  message: string
  data?: any
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∑–∞—â–∏—Ç—ã –æ—Ç CSRF
export async function generateFormToken(formId: string, timestamp: number): Promise<string> {
  if (!process.env.FORM_SECRET_KEY) {
    return "temp-token"
  }

  const data = `${formId}:${timestamp}`
  return createHmac("sha256", process.env.FORM_SECRET_KEY).update(data).digest("hex")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function verifyFormToken(formId: string, timestamp: number, token: string): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤)
  const now = Date.now()
  const minSubmitTime = 1500 // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã

  if (now - timestamp < minSubmitTime) {
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (–º–∞–∫—Å–∏–º—É–º 1 —á–∞—Å)
  const maxTokenAge = 60 * 60 * 1000 // 1 —á–∞—Å –≤ –º—Å
  if (now - timestamp > maxTokenAge) {
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω
  const expectedToken = generateFormToken(formId, timestamp)
  return token === expectedToken
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
export async function submitContactForm(formData: FormData): Promise<FormResult> {
  try {
    console.log("[SERVER ACTION] submitContactForm –≤—ã–∑–≤–∞–Ω —Å:", Object.fromEntries(formData.entries()))
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const rawData = {
      name: formData.get("name") as string,
      phone: formData.get("phone") as string,
      honeypot: formData.get("website") as string, // –ü–æ–ª–µ-–ª–æ–≤—É—à–∫–∞ –¥–ª—è –±–æ—Ç–æ–≤
      formId: formData.get("formId") as string,
      timestamp: Number(formData.get("timestamp")),
      token: formData.get("token") as string,
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF
    if (rawData.formId && rawData.timestamp && rawData.token) {
      if (!verifyFormToken(rawData.formId, rawData.timestamp, rawData.token)) {
        return {
          success: false,
          message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        }
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validationResult = FormSchema.safeParse(rawData)

    if (!validationResult.success) {
      return {
        success: false,
        message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.",
      }
    }

    const { name, phone } = validationResult.data

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const formattedData = {
      name,
      phone,
      date: new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" }),
      source: formData.get("source") || "–°–∞–π—Ç",
      utmSource: formData.get("utm_source") || "",
      utmMedium: formData.get("utm_medium") || "",
      utmCampaign: formData.get("utm_campaign") || "",
    }

    // –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    const sendPromises = []

    // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª)
    if (process.env.GOOGLE_SHEETS_ID) {
      sendPromises.push(
        appendToGoogleSheet(formattedData).catch(() => {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets")
        }),
      )
    }

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìÖ –î–∞—Ç–∞: ${formattedData.date}\nüîç –ò—Å—Ç–æ—á–Ω–∏–∫: ${formattedData.source}\n\nUTM: ${formattedData.utmSource} / ${formattedData.utmMedium} / ${formattedData.utmCampaign}`

      sendPromises.push(
        sendTelegramNotification(message).catch(() => {
          // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        }),
      )
    }

    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    await Promise.all(sendPromises)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
      data: { name },
    }
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return {
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    }
  }
}
